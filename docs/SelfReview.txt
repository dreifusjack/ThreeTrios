    In retrospect, there are design decisions we wish we had done differently in our previous
ThreeTrios assignments. First off, in our features controller implementation, our controller is
responsible for directly highlighting cards on selection. The problem with this is methods in the
controller take arguments of a class in our view package, and operate on those objects. However,
this is bad design and should have handled this by calling back to the view. This issue made
adapting their code to our controller very difficult. In future MVC systems, we will make sure
that each sector is responsible for calling methods on objects within their package and not allowing
other packages to handle that. Even though we found this design problem, our customers must have
found a way around it because they have not requested any changes from us.

    Our general experience in communicating with our providers was effective. However, we received
the provided code two days after we reached out to send it. After analyzing the provided code there
were some problems we had to address. Within their model and card interfaces they had methods that
returned a card implementation not an interface. This was a problem because we did not have the
implementation class, we only had access to the interface. Due to this, we had to request that our
providers change the return types of these methods. They were quick to respond, making requested
changes and sending it back to us. Thus alleviating our experience in adapting their code which was
very helpful.
